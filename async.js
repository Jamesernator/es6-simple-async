// Generated by CoffeeScript 1.10.0

/* Author James "The Jamesernator" Browning
    2016
 */

(function() {
  "use strict";
  var async,
    slice = [].slice;

  async = function(genFunc) {
    var asyncFunc;
    return asyncFunc = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var gen, iter;
          gen = genFunc.apply.apply(genFunc, [_this].concat(slice.call(args)));
          iter = (function*() {
            var awaiting, done, err, error, error1, isError, ref, ref1, ref2, result, value;
            result = void 0;
            isError = false;
            while (true) {
              if (!isError) {
                try {
                  ref = gen.next(result), value = ref.value, done = ref.done;
                } catch (error) {
                  err = error;
                  reject(err);
                }
              } else {
                try {
                  ref1 = gen["throw"](result), value = ref1.value, done = ref1.done;
                } catch (error1) {
                  err = error1;
                  reject(err);
                }
              }
              if (done) {
                resolve(value);
                return;
              }
              awaiting = Promise.resolve(value);
              ref2 = (yield awaiting.then(function(_result) {
                return iter.next({
                  result: _result,
                  isError: false
                });
              })["catch"](function(err) {
                return iter.next({
                  result: err,
                  isError: true
                });
              })), result = ref2.result, isError = ref2.isError;
            }
          })();
          return iter.next();
        };
      })(this));
    };
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = async;
  } else {
    window.async = async;
  }

}).call(this);
